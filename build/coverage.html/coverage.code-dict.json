{"/home/travis/build/npmtest/node-npmtest-tmi/test.js":"/* istanbul instrument in package npmtest_tmi */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tmi/lib.npmtest_tmi.js":"/* istanbul instrument in package npmtest_tmi */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tmi = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tmi = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tmi/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tmi && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tmi */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tmi\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tmi.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tmi.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tmi.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tmi.__dirname + '/lib.npmtest_tmi.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tmi/node_modules/tmi/index.js":"'use strict';\nconst fs = require('fs');\nconst path = require('path');\nconst prettyBytes = require('pretty-bytes');\nconst chalk = require('chalk');\nconst logSymbols = require('log-symbols');\n\nconst THRESHOLD = 70;\n\nclass Output {\n\tconstructor() {\n\t\t/**\n\t\t * What indices from BigQuery do we want to summarize scores\n\t\t * for in the CLI output?\n\t\t * @type {number[]}\n\t\t */\n\t\tthis.indicesOfInterest = [3, 6, 9]; // 25th, 50th, 75th percentile\n\n\t\t/**\n\t\t * Is the weight higher than one of the BigQuery\n\t\t * percentiles?\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.fasterThanAPercentile = false;\n\t\tthis.bigQueryData = {\n\t\t\tdesktop: [],\n\t\t\tmobile: [],\n\t\t\ttitles: []\n\t\t};\n\n\t\t/**\n\t\t * A subset of BigQuery data that we actually use for output\n\t\t * This should represent the indices of interest from the\n\t\t * bigQueryData.\n\t\t * @type {{desktop: Array, mobile: Array, titles: Array}}\n\t\t */\n\t\tthis.outputData = {\n\t\t\tdesktop: [],\n\t\t\tmobile: [],\n\t\t\ttitles: []\n\t\t};\n\n\t\t/**\n\t\t * Average image weights per site, based on BigQuery data\n\t\t * @type {{desktop: number, mobile: number}}\n\t\t */\n\t\tthis.medians = {};\n\n\t\tconst data = fs.readFileSync(path.join(__dirname, 'data/bigquery.csv'), 'utf8').split('\\n');\n\n\t\t// Complete full set of available BigQuery Data\n\t\tthis.bigQueryData.titles = data[0].split(',');\n\t\tthis.bigQueryData.desktop = data[1].split(',').slice(1).map(x => parseInt(x, 10));\n\t\tthis.bigQueryData.mobile = data[2].split(',').slice(1).map(x => parseInt(x, 10));\n\n\t\t// Sub-slice portions of data we're interested\n\t\tfor (const item of this.indicesOfInterest) {\n\t\t\tthis.outputData.desktop.push(this.bigQueryData.desktop[item]);\n\t\t\tthis.outputData.mobile.push(this.bigQueryData.mobile[item]);\n\t\t\tthis.outputData.titles.push(this.bigQueryData.titles[item]);\n\t\t}\n\n\t\tthis.medians.mobile = parseInt(this.bigQueryData.mobile[1], 10);\n\t\tthis.medians.desktop = parseInt(this.bigQueryData.desktop[1], 10);\n\t}\n\n\t/**\n\t * Compare a supplied image weight with the weight in a supplied percentile.\n\t * @param siteImageWeight\n\t * @param percentileImageWeight\n\t * @param percentile\n\t * @returns {string} Summary message of comparisons to the percentile\n\t */\n\tcompareWeightPercentile(siteImageWeight, percentileImageWeight, percentile) {\n\t\tif (siteImageWeight === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet diff = (siteImageWeight - parseInt(percentileImageWeight, 10)) * 1000;\n\n\t\tif (diff > 0) {\n\t\t\tdiff = chalk.red('+' + prettyBytes(diff));\n\t\t} else {\n\t\t\tdiff *= -1;\n\t\t\tdiff = chalk.green('-' + prettyBytes(diff));\n\t\t\tthis.fasterThanAPercentile = true;\n\t\t}\n\n\t\treturn diff + (' compared to sites in the ') + chalk.yellow(percentile.replace('p', '') + 'th') + ' percentile';\n\t}\n\n\tcompareWeights(siteImageWeight, sizes, percentiles) {\n\t\tif (siteImageWeight === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet comparisons = '';\n\t\tsiteImageWeight = parseInt(siteImageWeight, 10);\n\n\t\tfor (let i = 0; i < percentiles.length; i++) {\n\t\t\tcomparisons += this.compareWeightPercentile(siteImageWeight, sizes[i], percentiles[i]) + '\\n';\n\t\t}\n\n\t\treturn comparisons;\n\t}\n\n\t/**\n\t * Check if image weight is higher than one of the available percentile sizes\n\t * @param sizeImageWeight\n\t * @param sizes\n\t * @param percentiles\n\t * @returns {*}\n\t */\n\tgetHighestPercentile(sizeImageWeight, sizes, percentiles) {\n\t\tif (sizeImageWeight === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet highestPercentileMatch = -1;\n\t\tlet result;\n\n\t\t// Begin with index 2 to avoid catching unnecessary labels\n\t\t// like `desktop` and `mobile` included in this row of data\n\t\tfor (let i = 2; i < percentiles.length; i++) {\n\t\t\tsizes[i] = parseInt(sizes[i], 10);\n\n\t\t\tif (sizeImageWeight > sizes[i]) {\n\t\t\t\thighestPercentileMatch = i;\n\t\t\t}\n\t\t}\n\n\t\tif (highestPercentileMatch === -1) {\n\t\t\tresult = '0';\n\t\t} else {\n\t\t\tresult = percentiles[highestPercentileMatch];\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprocess(opts, res) {\n\t\tconst threshold = opts.threshold || THRESHOLD;\n\t\tconst yourImageWeight = parseInt(res.pageStats.imageResponseBytes || 0, 10);\n\t\tconst unoptimizedImages = res.formattedResults.ruleResults.OptimizeImages.urlBlocks;\n\t\tconst desktopWeights = this.compareWeights(yourImageWeight / 1000, this.outputData.desktop, this.outputData.titles);\n\t\tconst mobileWeights = this.compareWeights(yourImageWeight / 1000, this.outputData.mobile, this.outputData.titles);\n\t\tconst unoptimizedUrls = unoptimizedImages[0] && unoptimizedImages[0].urls;\n\t\tlet imagesToOptimize = '';\n\n\t\tif (opts.verbose && unoptimizedUrls && unoptimizedUrls.length > 0) {\n\t\t\tfor (const url of unoptimizedUrls) {\n\t\t\t\tfor (const x of url.result.args) {\n\t\t\t\t\tlet result = '';\n\n\t\t\t\t\tswitch (x.type) {\n\t\t\t\t\t\tcase 'URL':\n\t\t\t\t\t\t\tresult += chalk.green(x.value);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'BYTES':\n\t\t\t\t\t\t\tresult += `Size: ${chalk.red(x.value)}`;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'PERCENTAGE':\n\t\t\t\t\t\t\tresult += `Can be improved by ${chalk.yellow(x.value)}\\n`;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// No default\n\t\t\t\t\t}\n\n\t\t\t\t\timagesToOptimize += result + '\\n';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconsole.log([\n\t\t\tchalk.cyan('\\nYour image weight'), prettyBytes(yourImageWeight),\n\t\t\tchalk.gray('Median mobile site image weight'), prettyBytes(this.medians.mobile * 1000),\n\t\t\tchalk.gray('Median desktop site image weight'), prettyBytes(this.medians.desktop * 1000),\n\t\t\tchalk.cyan('\\nOn Mobile'),\n\t\t\tmobileWeights,\n\t\t\tchalk.cyan('On Desktop'),\n\t\t\tdesktopWeights\n\t\t].join('\\n'));\n\n\t\tif (this.fasterThanAPercentile) {\n\t\t\tconsole.log(chalk.cyan('Thanks for keeping the web fast <3'));\n\t\t}\n\n\t\tif (imagesToOptimize.length > 0) {\n\t\t\tconsole.log(chalk.underline('\\nImages to optimize\\n') + imagesToOptimize + chalk.cyan('This list does not include images which cannot be optimized further.\\nYou may consider removing those images if possible.\\n'));\n\t\t}\n\n\t\tif (res.score < threshold) {\n\t\t\tconsole.error(chalk.bold(`${logSymbols.error} Threshold of ${threshold} not met with score of ${res.score}`));\n\t\t\tprocess.exit(1); // eslint-disable-line unicorn/no-process-exit\n\t\t}\n\t}\n}\n\nmodule.exports = () => new Output();\n"}